{"version":3,"sources":["components/Button/Button.js","components/Status/Status.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Button","className","onClick","props","value","this","icon","React","Component","Status","text","App","state","result","handleClick","playerSelection","computerSelection","makeAutomatedSelection","checkForWinner","setState","generateRandomNumberBetween1and3","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAGaA,G,YAAb,uKACY,IAAD,OACP,OAAQ,4BAAQC,UAAU,SAASC,QAAS,kBAAM,EAAKC,MAAMD,QAAQ,EAAKC,MAAMC,SAC7EC,KAAKF,MAAMG,UAHlB,GAA4BC,IAAMC,YCFrBC,EAAb,uKAEI,OAAO,6BAAMJ,KAAKF,MAAMO,UAF5B,GAA4BH,IAAMC,WCwInBG,E,kDAnIb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,OAAQ,yBAHO,E,qDAOT,IAAD,OACP,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAChB,kDACA,kBAAC,EAAD,CACEG,MAAM,OACNE,KAAM,uBAAGL,UAAU,2BACnBC,QAAS,SAACE,GAAD,OAAW,EAAKU,YAAYV,MAEvC,kBAAC,EAAD,CACEA,MAAM,QACNE,KAAM,uBAAGL,UAAU,4BACnBC,QAAS,SAACE,GAAD,OAAW,EAAKU,YAAYV,MAEvC,kBAAC,EAAD,CACEA,MAAM,WACNE,KAAM,uBAAGL,UAAU,+BACnBC,QAAS,SAACE,GAAD,OAAW,EAAKU,YAAYV,MAEvC,kBAAC,EAAD,CAAQM,KAAML,KAAKO,MAAMC,a,kCAMrBT,GACV,IAAIW,EAAkBX,EAClBY,EAAoBX,KAAKY,yBACzBJ,EAASR,KAAKa,eAAeH,EAAiBC,GAClDX,KAAKc,SAAS,CAAEN,OAAQA,M,qCAGXE,EAAiBC,GAC9B,OAAID,IAAoBC,EAEpB,6BACE,wCAAcD,GACd,6CAAmBC,GACnB,4CAGyB,SAApBD,EACiB,aAAtBC,EAEA,6BACE,wCAAcD,GACd,6CAAmBC,GACnB,wCAKF,6BACE,wCAAcD,GACd,6CAAmBC,GACnB,yCAIuB,UAApBD,EACiB,SAAtBC,EAEA,6BACE,wCAAcD,GACd,6CAAmBC,GACnB,wCAKF,6BACE,wCAAcD,GACd,6CAAmBC,GACnB,yCAIuB,aAApBD,EAGL,6BACE,wCAAcA,GACd,6CAAmBC,GACnB,6CAND,I,+CAsBP,IAAIA,EAGJ,OAF+BX,KAAKe,oCAGlC,KAAK,EACHJ,EAAoB,OACpB,MACF,KAAK,EACHA,EAAoB,QACpB,MACF,KAAK,EACHA,EAAoB,WACpB,MACF,QACEA,EAAoB,OAExB,OAAOA,I,yDAIP,OAAOK,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,M,GAhIzBhB,IAAMC,WCOJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4448a84d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nexport class Button extends React.Component {\n  render() {\n    return (<button className=\"Button\" onClick={() => this.props.onClick(this.props.value)}>\n      {this.props.icon}\n    </button>);\n  }\n}\n","import React from \"react\";\nexport class Status extends React.Component {\n  render() {\n    return <div>{this.props.text}</div>;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Button } from \"../Button/Button\";\nimport { Status } from \"../Status/Status\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: \"Please make your move\",\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Rock Paper Scissors</p>\n          <Button\n            value=\"Rock\"\n            icon={<i className=\"fas fa-hand-rock fa-5x\"></i>}\n            onClick={(value) => this.handleClick(value)}\n          />\n          <Button\n            value=\"Paper\"\n            icon={<i className=\"fas fa-hand-paper fa-5x\"></i>}\n            onClick={(value) => this.handleClick(value)}\n          />\n          <Button\n            value=\"Scissors\"\n            icon={<i className=\"fas fa-hand-scissors fa-5x\"></i>}\n            onClick={(value) => this.handleClick(value)}\n          />\n          <Status text={this.state.result} />\n        </header>\n      </div>\n    );\n  }\n\n  handleClick(value) {\n    let playerSelection = value;\n    let computerSelection = this.makeAutomatedSelection();\n    let result = this.checkForWinner(playerSelection, computerSelection);\n    this.setState({ result: result });\n  }\n\n  checkForWinner(playerSelection, computerSelection) {\n    if (playerSelection === computerSelection) {\n      return (\n        <div>\n          <p>You chose {playerSelection}</p>\n          <p>Computer chose {computerSelection}</p>\n          <p>It's a draw!</p>\n        </div>\n      );\n    } else if (playerSelection === \"Rock\") {\n      if (computerSelection === \"Scissors\") {\n        return (\n          <div>\n            <p>You chose {playerSelection}</p>\n            <p>Computer chose {computerSelection}</p>\n            <p>You win!</p>\n          </div>\n        );\n      } else {\n        return (\n          <div>\n            <p>You chose {playerSelection}</p>\n            <p>Computer chose {computerSelection}</p>\n            <p>You lose.</p>\n          </div>\n        );\n      }\n    } else if (playerSelection === \"Paper\") {\n      if (computerSelection === \"Rock\") {\n        return (\n          <div>\n            <p>You chose {playerSelection}</p>\n            <p>Computer chose {computerSelection}</p>\n            <p>You win!</p>\n          </div>\n        );\n      } else {\n        return (\n          <div>\n            <p>You chose {playerSelection}</p>\n            <p>Computer chose {computerSelection}</p>\n            <p>You lose.</p>\n          </div>\n        );\n      }\n    } else if (playerSelection === \"Scissors\") {\n      if (computerSelection === \"Paper\") {\n        return (\n          <div>\n            <p>You chose {playerSelection}</p>\n            <p>Computer chose {computerSelection}</p>\n            <p>You win!</p>\n          </div>\n        );\n      } else {\n        return (\n          <div>\n            <p>You chose {playerSelection}</p>\n            <p>Computer chose {computerSelection}</p>\n            <p>You win!</p>\n          </div>\n        );\n      }\n    }\n  }\n\n  makeAutomatedSelection() {\n    let computerSelection;\n    let randomNumberBetween1and3 = this.generateRandomNumberBetween1and3();\n\n    switch (randomNumberBetween1and3) {\n      case 1:\n        computerSelection = \"Rock\";\n        break;\n      case 2:\n        computerSelection = \"Paper\";\n        break;\n      case 3:\n        computerSelection = \"Scissors\";\n        break;\n      default:\n        computerSelection = \"Rock\";\n    }\n    return computerSelection;\n  }\n\n  generateRandomNumberBetween1and3() {\n    return Math.floor(Math.random() * 3) + 1;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}